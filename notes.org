1. Functions
   - F6: Shifted Rosenbrock’s Function
   - F7: Shifted Rotated Griewank’s Function without Bounds
   - F8: Shifted Rotated Ackley’s Function with Global Optimum on Bounds
   - F9: Shifted Rastrigin’s Function
   - F10: Shifted Rotated Rastrigin’s Function
   - F11: Shifted Rotated Weierstrass Function
   - F12: Schwefel’s Problem 2.13
   - F19: Rotated Hybrid Composition Function with a Narrow Basin
     for the Global Optimum
   - F20: Rotated Hybrid Composition Function with the Global Optimum
     on the Bounds
   - F21: Rotated Hybrid Composition Function
   - F22: Rotated Hybrid Composition Function with High Condition Number Matrix
   - F23: Non-Continuous Rotated Hybrid Composition Function
   - F24: Rotated Hybrid Composition Function

2. Domentions
   - 10
   - 30

3. Benchmark

   1. 25 runs
   2. Terminate with success if precision is less than 10^-8
   3. Terminate with error if reached FE_max
   4. FE_max = function evaluations max = 10000 * D

4. Goals:

   1. Implement the benchmark itself in R
   2. Implement functions in R (or use cec2005benchmark package)
   3. Improve DEoptim to record value at specific function evoluation number?
   4. Improve DEoptim to stop when function evoluation number limit is reached
   5. Gather benchmark results for functions (as above) using DEoptim
      1. function error recorded at 1.0e3, 1.0e4, 1.0e5 function evoluations
      2. and upon termination
      3. value and error for 25 runs
      4. mean, std of error for 25 runs
      5. 1, 7, 13, 19 and 25th values



Algorithm
1. bias = read(biases)
2. fe_per_strategy = [...]
3. for i in xrange(functions):
   1. f = fun(x) -> functions[i](x) - bias[i] end.
   2. fes = [10**3, 10**4, 10**5, 5*10**5]:
   3. upper = uppers[i]
   4. lower = lowers[i]
   5. for d in [10, 30]:
      1. np = nps[d][i]
      2. for run in xrange(25:)
         1. store_start = 0
         2. store_freq = fes[0]/fe_per_strategy[i]
         3. r = DEoptim(f, lower, upper, itermax=iters, NP=np,
            initialpop=init, vtr=10**-8, strategy=1,
            storepopfrom=store_freq, storepopfreq=store_freq)
         4. for fe in fes:
            1. pop = get_val_by_fe(store_freq, fe, r)
            2. val = f(pop)
            3. results[i, run, D, fe] = val 

get_val_by_fe(freq, fe, r):
1. i = fe / freq
2. r$storepop[i]

# 1. init = initial_pop(upper, lower)
# 2. ofe = 0
# 3. for fe in fes:
#    1. iters = (fe-ofe)/fe_per_strategy[i]
#    2. r = DEoptim(f, lower, upper, itermax=iters, NP=np,
#       initialpop=init, vtr=10**-8, strategy=1)
#    3. init = r$pop
#    4. ofe = fe
#    5. results[i, run, D, fe] = r$bestval
